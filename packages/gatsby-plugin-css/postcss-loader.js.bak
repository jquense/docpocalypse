const path = require('path');

const { getOptions } = require('loader-utils');
const postcss = require('postcss');
const postcssrc = require('postcss-load-config');

module.exports = function postcssLoader(css, map, meta) {
  const cb = this.async();

  const loaderOptions = { ...getOptions(this) };
  const file = this.resourcePath;

  const { sourceMap } = loaderOptions;

  const parseOptions = ({ exec, parser, syntax, stringifier, plugins }) => {
    if (typeof plugins === 'function') {
      plugins = plugins.call(this, this);
    }
    if (typeof plugins === 'undefined') {
      plugins = [];
    } else if (!Array.isArray(plugins)) {
      plugins = [plugins];
    }

    const options = {};

    options.parser = parser;
    options.syntax = syntax;
    options.stringifier = stringifier;

    return { options, plugins, exec };
  };

  const getConfig = () => {
    const providedConfig = getOptions(loaderOptions);
    let filePath = path.dirname(file);
    const ctx = {
      file: {
        extname: path.extname(file),
        dirname: path.dirname(file),
        basename: path.basename(file),
      },
      options: {},
    };

    if (loaderOptions.config) {
      if (loaderOptions.config.path) {
        filePath = path.resolve(loaderOptions.config.path);
      }

      if (loaderOptions.config.ctx) {
        ctx.loaderOptions = loaderOptions.config.ctx;
      }
    }

    ctx.webpack = this;
    try {
    const config = await postcssrc(ctx, filePath);
    } catch {

    }
  };

  async function process() {
    const config = await getConfig();
  }
};
