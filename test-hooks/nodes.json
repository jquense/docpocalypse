{"id":0,"name":"test-hooks","kind":0,"flags":{},"originalName":"","children":[{"id":1,"name":"\"hooks/useInterval\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/jquense/src/docpocalypse/test-hooks/src/hooks/useInterval.ts","children":[{"id":2,"name":"useInterval","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":3,"name":"useInterval","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a `setInterval` that is properly cleaned up when a component unmounted"},"parameters":[{"id":4,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"an function run on each interval"},"type":{"type":"reflection","declaration":{"id":5,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":6,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"hooks/useInterval.ts","line":12,"character":24}]}}},{"id":7,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The milliseconds duration of the interval\n"},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}},{"id":8,"name":"useInterval","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a pausable `setInterval` that is properly cleaned up when a component unmounted"},"parameters":[{"id":9,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"an function run on each interval"},"type":{"type":"reflection","declaration":{"id":10,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":11,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"hooks/useInterval.ts","line":20,"character":24}]}}},{"id":12,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The milliseconds duration of the interval"},"type":{"type":"intrinsic","name":"number"}},{"id":13,"name":"paused","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"Whether or not the interval is currently running\n"},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"void"}},{"id":14,"name":"useInterval","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Creates a pausable `setInterval` that is properly cleaned up when a component unmounted"},"parameters":[{"id":15,"name":"fn","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"an function run on each interval"},"type":{"type":"reflection","declaration":{"id":16,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":17,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"hooks/useInterval.ts","line":31,"character":5}]}}},{"id":18,"name":"ms","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"The milliseconds duration of the interval"},"type":{"type":"intrinsic","name":"number"}},{"id":19,"name":"paused","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"Whether or not the interval is currently running"},"type":{"type":"intrinsic","name":"boolean"}},{"id":20,"name":"runImmediately","kind":32768,"kindString":"Parameter","flags":{},"comment":{"text":"Whether to run the function immediately on mount or unpause\nrather than waiting for the first interval to elapse\n"},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"hooks/useInterval.ts","line":12,"character":20},{"fileName":"hooks/useInterval.ts","line":20,"character":20},{"fileName":"hooks/useInterval.ts","line":30,"character":20},{"fileName":"hooks/useInterval.ts","line":37,"character":20}]}],"groups":[{"title":"Functions","kind":64,"children":[2]}],"sources":[{"fileName":"hooks/useInterval.ts","line":1,"character":0}]},{"id":21,"name":"\"other/useFocusManager\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/jquense/src/docpocalypse/test-hooks/src/other/useFocusManager.ts","children":[{"id":22,"name":"FocusManagerOptions","kind":256,"kindString":"Interface","flags":{"isExported":true},"children":[{"id":35,"name":"isDisabled","kind":1024,"kindString":"Property","flags":{"isExported":true},"comment":{"shortText":"When true, the event handlers will not report focus changes"},"sources":[{"fileName":"other/useFocusManager.ts","line":26,"character":12}],"type":{"type":"reflection","declaration":{"id":36,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":37,"name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"}}],"sources":[{"fileName":"other/useFocusManager.ts","line":26,"character":13}]}}},{"id":27,"name":"didHandle","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":28,"name":"didHandle","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired after focus is handled but before onChange is called"},"parameters":[{"id":29,"name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"}},{"id":30,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"other/useFocusManager.ts","line":16,"character":11}]},{"id":31,"name":"onChange","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":32,"name":"onChange","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired after focus has changed"},"parameters":[{"id":33,"name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"}},{"id":34,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"other/useFocusManager.ts","line":21,"character":10}]},{"id":23,"name":"willHandle","kind":2048,"kindString":"Method","flags":{"isExported":true,"isOptional":true},"signatures":[{"id":24,"name":"willHandle","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"A callback fired when focus shifts. returning `false` will prevent\nhandling the focus event"},"parameters":[{"id":25,"name":"focused","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"intrinsic","name":"boolean"}},{"id":26,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"type":{"type":"reference","name":"FocusEvent"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"void"}]}}],"sources":[{"fileName":"other/useFocusManager.ts","line":11,"character":12}]}],"groups":[{"title":"Properties","kind":1024,"children":[35]},{"title":"Methods","kind":2048,"children":[27,31,23]}],"sources":[{"fileName":"other/useFocusManager.ts","line":6,"character":36}]},{"id":38,"name":"useFocusManager","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":39,"name":"useFocusManager","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"useFocusManager provides a way to track and manage focus as it moves around\na container element. An `onChange` is fired when focus enters or leaves the\nelement, but not when it moves around inside the element, similar to\n`pointerenter` and `pointerleave` DOM events.","text":"```ts\nconst [focused, setFocusState] = useState(false)\n\nconst { onBlur, onFocus } = useFocusManager({\n  onChange: nextFocused => setFocusState(nextFocused)\n})\n\nreturn (\n  <div tabIndex=\"-1\" onFocus={onFocus} onBlur={onBlur}>\n    {String(focused)}\n    <input />\n    <input />\n\n    <button>A button</button>\n  </div>\n```\n","returns":"FocusController a set of paired focus and blur event handlers\n"},"parameters":[{"id":40,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"comment":{"text":"Options"},"type":{"type":"reference","id":22,"name":"FocusManagerOptions"}}],"type":{"type":"reflection","declaration":{"id":41,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"children":[{"id":45,"name":"onFocus","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"other/useFocusManager.ts","line":59,"character":9}],"type":{"type":"reflection","declaration":{"id":46,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"signatures":[{"id":47,"name":"__call","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":48,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isOptional":true},"type":{"type":"reference","name":"SyntheticEvent"}}],"type":{"type":"intrinsic","name":"any"}}],"sources":[{"fileName":"other/useFocusManager.ts","line":59,"character":10}]}}},{"id":42,"name":"onBlur","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":43,"name":"onBlur","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"parameters":[{"id":44,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isOptional":true},"type":{"type":"reference","name":"SyntheticEvent"}}],"type":{"type":"intrinsic","name":"any"}}],"sources":[{"fileName":"other/useFocusManager.ts","line":58,"character":8}]}],"groups":[{"title":"Variables","kind":32,"children":[45]},{"title":"Functions","kind":64,"children":[42]}],"sources":[{"fileName":"other/useFocusManager.ts","line":57,"character":2}]}}}],"sources":[{"fileName":"other/useFocusManager.ts","line":55,"character":39}]}],"groups":[{"title":"Interfaces","kind":256,"children":[22]},{"title":"Functions","kind":64,"children":[38]}],"sources":[{"fileName":"other/useFocusManager.ts","line":1,"character":0}]},{"id":49,"name":"\"other/useImmediateUpdateEffect\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/jquense/src/docpocalypse/test-hooks/src/other/useImmediateUpdateEffect.ts","children":[{"id":50,"name":"useImmediateUpdateEffect","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":51,"name":"useImmediateUpdateEffect","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"An _immediate_ effect that runs an effect callback when its dependency array\nchanges. This is helpful for updates should must run during render, most\ncommonly state derived from props; a more ergonomic version of https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops","text":"```ts\nfunction Example({ value }) {\n  const [intermediaryValue, setValue] = useState(value);\n\n  useImmediateUpdateEffect(() => {\n    setValue(value)\n  }, [value])\n```\n"},"parameters":[{"id":52,"name":"effect","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"EffectCallback"}},{"id":53,"name":"deps","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"DependencyList"}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"other/useImmediateUpdateEffect.ts","line":21,"character":33}]}],"groups":[{"title":"Functions","kind":64,"children":[50],"categories":[{"title":"effects","children":[50]}]}],"sources":[{"fileName":"other/useImmediateUpdateEffect.ts","line":1,"character":0}]},{"id":54,"name":"\"other/useIntersectionObserver\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/jquense/src/docpocalypse/test-hooks/src/other/useIntersectionObserver.ts","children":[{"id":55,"name":"useIntersectionObserver","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":56,"name":"useIntersectionObserver","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"comment":{"shortText":"Setup an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) on\na DOM Element."},"typeParameter":[{"id":57,"name":"TElement","kind":131072,"kindString":"Type parameter","flags":{"isExported":true},"type":{"type":"reference","name":"Element"}}],"parameters":[{"id":58,"name":"element","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"comment":{"text":"The DOM element to observe"},"type":{"type":"union","types":[{"type":"typeParameter","name":"TElement","constraint":{"type":"reference","name":"Element"}},{"type":"intrinsic","name":"null"},{"type":"intrinsic","name":"undefined"}]}},{"id":59,"name":"__namedParameters","kind":32768,"kindString":"Parameter","flags":{"isExported":true},"originalName":"__1","type":{"type":"reflection","declaration":{"id":60,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExported":true},"children":[{"id":62,"name":"root","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"other/useIntersectionObserver.ts","line":14,"character":19}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"null"},{"type":"reference","name":"Element"}]}},{"id":63,"name":"rootMargin","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"other/useIntersectionObserver.ts","line":14,"character":31}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}},{"id":61,"name":"threshold","kind":32,"kindString":"Variable","flags":{"isExported":true},"sources":[{"fileName":"other/useIntersectionObserver.ts","line":14,"character":13}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"intrinsic","name":"number"}}]}}],"groups":[{"title":"Variables","kind":32,"children":[62,63,61]}],"sources":[{"fileName":"other/useIntersectionObserver.ts","line":13,"character":39}]}},"defaultValue":"{}"}],"type":{"type":"array","elementType":{"type":"reference","name":"IntersectionObserverEntry"}}}],"sources":[{"fileName":"other/useIntersectionObserver.ts","line":12,"character":47}]}],"groups":[{"title":"Functions","kind":64,"children":[55]}],"sources":[{"fileName":"other/useIntersectionObserver.ts","line":1,"character":0}]},{"id":64,"name":"\"other/useMergedRefs\"","kind":1,"kindString":"External module","flags":{"isExported":true},"originalName":"/Users/jquense/src/docpocalypse/test-hooks/src/other/useMergedRefs.ts","children":[{"id":65,"name":"CallbackRef","kind":4194304,"kindString":"Type alias","flags":{},"typeParameter":[{"id":66,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":3,"character":16}],"type":{"type":"reflection","declaration":{"id":67,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":68,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":69,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"typeParameter","name":"T"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":3,"character":21}]}}},{"id":70,"name":"Ref","kind":4194304,"kindString":"Type alias","flags":{},"typeParameter":[{"id":71,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":4,"character":8}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"typeParameter","name":"T"}],"name":"MutableRefObject"},{"type":"reference","id":65,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"CallbackRef"}]}},{"id":79,"name":"mergeRefs","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":80,"name":"mergeRefs","kind":4096,"kindString":"Call signature","flags":{"isExported":true},"typeParameter":[{"id":81,"name":"T","kind":131072,"kindString":"Type parameter","flags":{"isExported":true}}],"parameters":[{"id":82,"name":"refA","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":70,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"Ref"},{"type":"intrinsic","name":"null"}]}},{"id":83,"name":"refB","kind":32768,"kindString":"Parameter","flags":{"isExported":true,"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":70,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"Ref"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"(Anonymous function)"}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":13,"character":25}]},{"id":72,"name":"toFnRef","kind":64,"kindString":"Function","flags":{"isConst":true},"signatures":[{"id":73,"name":"toFnRef","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":74,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":75,"name":"ref","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","id":70,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"Ref"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"null"},{"type":"reflection","declaration":{"id":76,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":77,"name":"__call","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":78,"name":"ref","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"typeParameter","name":"T"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"intrinsic","name":"void"}}]}}]}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":6,"character":13}]},{"id":84,"name":"useMergedRefs","kind":64,"kindString":"Function","flags":{"isExported":true},"signatures":[{"id":85,"name":"useMergedRefs","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Create and returns a single callback ref composed from two other Refs.","text":"```tsx\nconst Button = React.forwardRef((props, ref) => {\n  const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n  const mergedRef = useMergedRefs(ref, attachRef);\n\n  return <button ref={mergedRef} {...props}/>\n})\n```\n"},"typeParameter":[{"id":86,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":87,"name":"refA","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"text":"A Callback or mutable Ref"},"type":{"type":"union","types":[{"type":"reference","id":70,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"Ref"},{"type":"intrinsic","name":"null"}]}},{"id":88,"name":"refB","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"text":"A Callback or mutable Ref"},"type":{"type":"union","types":[{"type":"reference","id":70,"typeArguments":[{"type":"typeParameter","name":"T"}],"name":"Ref"},{"type":"intrinsic","name":"null"}]}}],"type":{"type":"reference","name":"(Anonymous function)"}}],"sources":[{"fileName":"other/useMergedRefs.ts","line":38,"character":22}]}],"groups":[{"title":"Type aliases","kind":4194304,"children":[65,70]},{"title":"Functions","kind":64,"children":[79,72,84],"categories":[{"title":"Other","children":[79,72]},{"title":"refs","children":[84]}]}],"sources":[{"fileName":"other/useMergedRefs.ts","line":1,"character":0}]}],"groups":[{"title":"External modules","kind":1,"children":[1,21,49,54,64]}]}